<%# Answer Variable => Ruby Variable Translation -%>
<%
  @auth_database    = ENV["q_puppet_enterpriseconsole_auth_database_name"]
  @auth_user        = ENV["q_puppet_enterpriseconsole_auth_database_user"]
  @auth_password    = ENV["q_puppet_enterpriseconsole_auth_database_password"].gsub("'","")
  @remote           = ENV["q_puppet_enterpriseconsole_database_remote"] == 'y' ? true : false
  @hostname         = @remote ? ENV["q_puppet_enterpriseconsole_database_host"] : ['localhost']
  @port             = @remote ? ENV["q_puppet_enterpriseconsole_database_port"] : 3306
-%>
##### DATABASE #################################################################

database:
  reconnect: true
  adapter: mysql
  database: <%= @auth_database %>
  username: <%= @auth_user %>
  password: '<%= @auth_password %>'
<% if @remote -%>
  host: <%= @hostname %>
  port: <%= @port %>
<% end -%>

##### AUTHENTICATION ###########################################################

authenticator:
  class: CASServer::Authenticators::SQLEncrypted
  database:
    reconnect: true
    adapter: mysql
    database: <%= @auth_database %>
    username: <%= @auth_user %>
    password: '<%= @auth_password %>'
<% if @remote -%>
    host: <%= @hostname %>
    port: <%= @port %>
<% end -%>
  user_table: users
  username_column: username

# === Google Authentication ====================================================
#
# The Google authenticator allows users to log in to your CAS server using
# their Google account credentials (i.e. the same email and password they
# would use to log in to Google services like Gmail). This authenticator
# requires no special configuration -- just specify its class name:
#
# authenticator:
#  class: CASServer::Authenticators::Google
#
# If you are behind an http proxy, you can try specifying proxy settings as follows:
#
#authenticator:
#  class: CASServer::Authenticators::Google
#  proxy:
#    host: your-proxy-server
#    port: 8080
#    username: nil
#    password: nil
#
# Note that as with all authenticators, it is possible to use the Google·
# authenticator alongside other authenticators. For example, CAS can first
# attempt to validate the account with Google, and if that fails, fall back
# to some other local authentication mechanism.
#
# For example:
#
#authenticator:
#  - class: CASServer::Authenticators::Google
#  - class: CASServer::Authenticators::SQL
#    database:
#      adapter: mysql
#      database: some_database_with_users_table
#      username: root
#      password:
#      host: localhost
#    user_table: user
#    username_column: username
#    password_column: password
#
#
# === ActiveDirectory Authentication ===========================================
#
# This method authenticates against Microsoft's Active Directory using LDAP.
# You must configure the ActiveDirectory server, and base DN. The port number
# and LDAP filter are optional. You must also enter a CN and password
# for a special "authenticator" user. This account is used to log in to
# the ActiveDirectory server and search LDAP. This does not have to be an
# administrative account -- it only has to be able to search for other
# users.
#·
# Note that the auth_user parameter must be the user's CN (Common Name).
# In Active Directory, the CN is genarally the user's full name, which is usually
# NOT the same as their username (sAMAccountName).
#
# For example:
#
#authenticator:·
#  class: CASServer::Authenticators::ActiveDirectoryLDAP
#  ldap:
#    host: ad.example.net
#    port: 389
#    base: dc=example,dc=net
#    filter: (objectClass=person)
#    auth_user: authenticator
#    auth_password: itsasecret
#
# A more complicated example, where the authenticator will use TLS encryption,
# will ignore users with disabled accounts, and will pass on the 'cn' and 'mail'·
# attributes to CAS clients:
#
#authenticator:
#  class: CASServer::Authenticators::ActiveDirectoryLDAP
#  ldap:
#    host: ad.example.net
#    port: 636
#    base: dc=example,dc=net
#    filter: (objectClass=person) & !(msExchHideFromAddressLists=TRUE)
#    auth_user: authenticator
#    auth_password: itsasecret
#    encryption: simple_tls
#  extra_attributes: cn, mail
#
# It is possible to authenticate against Active Directory without the
# authenticator user, but this requires that users type in their CN as
# the username rather than typing in their sAMAccountName. In other words
# users will likely have to authenticate by typing their full name,
# rather than their username. If you prefer to do this, then just
# omit the auth_user and auth_password values in the above example.
#
#
# === LDAP Authentication ======================================================
#
# This is a more general version of the ActiveDirectory authenticator.
# The configuration is similar, except you don't need an authenticator
# username or password. The following example has been reported to work·
# for a basic OpenLDAP setup.
#
#authenticator:
#  class: CASServer::Authenticators::LDAP
#  ldap:
#    host: ldap.example.net
#    port: 389
#    base: dc=example,dc=net
#    username_attribute: uid
#    filter: (objectClass=person)
#
# If you need more secure connections via TSL, specify the 'encryption'
# option and change the port. This example also forces the authenticator
# to connect using a special "authenticator" user with the given
# username and password (see the ActiveDirectoryLDAP authenticator
# explanation above):
#
#authenticator:
#  class: CASServer::Authenticators::LDAP
#  ldap:
#    host: ldap.example.net
#    port: 636
#    base: dc=example,dc=net
#    filter: (objectClass=person)
#    encryption: simple_tls
#    auth_user: cn=admin,dc=example,dc=net
#    auth_password: secret
#
# If you need additional data about the user passed to the client (for example,
# their 'cn' and 'mail' attributes, you can specify the list of attributes
# under the extra_attributes config option:·
#
#authenticator:
#  class: CASServer::Authenticators::LDAP
#  ldap:
#    host: ldap.example.net
#    port: 389
#    base: dc=example,dc=net
#    filter: (objectClass=person)
#  extra_attributes: cn, mail
#
# Note that the above functionality is somewhat limited by client compatibility.
# See the SQL authenticator notes above for more info.
#
#

# === Custom Authentication ====================================================
#
# It should be relatively easy to write your own Authenticator class. Have a look
# at the built-in authenticators in the casserver/authenticators directory. Your
# authenticator should extend the CASServer::Authenticators::Base class and must
# implement a validate() method that takes a single hash argument. When the user·
# submits the login form, the username and password they entered is passed to·
# validate() as a hash under :username and :password keys. In the future, this·
# hash might also contain other data such as the domain that the user is logging·
# in to.
#
# To use your custom authenticator, specify it's class name and path to the·
# source file in the authenticator section of the config. Any other parameters·
# you specify in the authenticator configuration will be passed on to the·
# authenticator and made availabe in the validate() method as an @options hash.
#
# Example:
#
#authenticator:
#  class: FooModule::MyCustomAuthenticator
#  source: /path/to/source.rb
#  option_a: foo
#  another_option: yeeha
#
# === Multiple Authenticators ==================================================
#
# If you need to have more than one source for authentication, such as an LDAP·
# directory and a database, you can use multiple authenticators by making·
# :authenticator an array of authenticators.
#
#authenticator:
#  -
#    class: CASServer::Authenticators::ActiveDirectoryLDAP
#    ldap:
#      host: ad.example.net
#      port: 389
#      base: dc=example,dc=net
#      filter: (objectClass=person)
#  -
#    class: CASServer::Authenticators::SQL
#    database:
#      adapter: mysql
#      database: some_database_with_users_table
#      username: root
#      password:
#      host: localhost
#    user_table: user
#    username_column: username
#    password_column: password
#
# During authentication, the user credentials will be checked against the first
# authenticator and on failure fall through to the second authenticator.


##### LOOK & FEEL ##############################################################

custom_views: /opt/puppet/share/console-auth/views
public_dir: /opt/puppet/share/console-auth/public

##### LOCALIZATION (L10N) #######################################################

default_locale: en

##### LOGGING ##################################################################

log:
  file: /var/log/pe-console-auth/cas.log
  level: INFO

## If you want full database logging, uncomment this next section.
## Every SQL query will be logged here. This is useful for debugging database 
## problems.
#db_log:
#  file: /var/log/pe-console-auth/cas_db.log

##### SINGLE SIGN-OUT ##########################################################

enable_single_sign_out: true

##### OTHER ####################################################################

## Values are specified in seconds.
maximum_unused_login_ticket_lifetime: 300
maximum_unused_service_ticket_lifetime: 300
maximum_session_lifetime: 172800

