<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<beans
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:amq="http://activemq.apache.org/schema/core"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
    http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd
    http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring.xsd">

    <!-- Allows us to use system properties as variables in this configuration file -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <value>file:${activemq.base}/conf/credentials.properties</value>
        </property>
    </bean>

    <!--
        The <broker> element is used to configure the ActiveMQ broker.
    -->
    <broker xmlns="http://activemq.apache.org/schema/core" brokerName="localhost" dataDirectory="${activemq.base}/data" destroyApplicationContextOnStop="true" useJmx="true" persistent="false">

        <!--
          For better performances use VM cursor and small memory limit.
          For more information, see:

          http://activemq.apache.org/message-cursors.html

          Also, if your producer is "hanging", it's probably due to producer
          flow control.

          For more information, see:
          http://activemq.apache.org/producer-flow-control.html
        -->

        <destinationPolicy>
            <policyMap>
              <policyEntries>
                <policyEntry topic=">" producerFlowControl="false" memoryLimit="5mb">
                  <pendingSubscriberPolicy>
                    <vmCursor />
                  </pendingSubscriberPolicy>
                </policyEntry>
                <policyEntry queue=">" producerFlowControl="false" memoryLimit="20mb">
                  <!--
                    Use VM cursor for better latency
                    For more information, see:

                    http://activemq.apache.org/message-cursors.html

                  <pendingQueuePolicy>
                    <vmQueueCursor/>
                  </pendingQueuePolicy>
                  -->
                </policyEntry>
              </policyEntries>
            </policyMap>
        </destinationPolicy>

        <!--
          The managementContext is used to configure how ActiveMQ is exposed in
          JMX. By default, ActiveMQ uses the MBean server that is started by
          the JVM. For more information, see:

          http://activemq.apache.org/jmx.html
        -->
        <managementContext>
            <managementContext createConnector="false"/>
        </managementContext>

<% if ! scope.lookupvar('pe_mcollective::activemq_brokers_real').empty? -%>
        <%= "<networkConnectors>\n" -%>
<% scope.lookupvar('pe_mcollective::activemq_brokers_real').to_a.each do |broker| -%>
            <%= "<networkConnector name=\"#{broker}\" uri=\"static:(#{scope.lookupvar('pe_mcollective::openwire_activemq_protocol')}://#{broker}:61616)\" userName=\"mcollective\" password=\"#{scope.lookupvar('pe_mcollective::stomp_password')}\" duplex=\"true\"/>\n" -%>
<% end -%>
        <%= "</networkConnectors>\n\n" -%>
<% end -%>
        <!--
          Configure message persistence for the broker. The default persistence
          mechanism is the KahaDB store (identified by the kahaDB tag).
          For more information, see:

          http://activemq.apache.org/persistence.html
        -->
        <persistenceAdapter>
            <kahaDB directory="${activemq.base}/data/kahadb"/>
        </persistenceAdapter>

        <plugins>
          <!--
            Enable the statisticsBrokerPlugin to allow ActiveMQ to collect
            statistics.
          -->
          <statisticsBrokerPlugin/>

          <!--
            Here we define a default set of users
          -->
          <simpleAuthenticationPlugin>
            <users>
              <authenticationUser username="mcollective" password="<%= scope.lookupvar('pe_mcollective::stomp_password') %>" groups="mcollective,admins,everyone"/>
            </users>
          </simpleAuthenticationPlugin>
          <authorizationPlugin>
            <map>
              <authorizationMap>
                <authorizationEntries>
                  <authorizationEntry queue=">" write="admins" read="admins" admin="admins" />
                  <authorizationEntry topic=">" write="admins" read="admins" admin="admins" />
                  <authorizationEntry topic="mcollective.>" write="mcollective" read="mcollective" admin="mcollective" />
                  <authorizationEntry topic="mcollective.>" write="mcollective" read="mcollective" admin="mcollective" />
                  <authorizationEntry topic="ActiveMQ.Advisory.>" read="everyone" write="everyone" admin="everyone"/>
                </authorizationEntries>
              </authorizationMap>
            </map>
          </authorizationPlugin>
        </plugins>

        <!--
          The systemUsage controls the maximum amount of space the broker will
          use before slowing down producers. For more information, see:
          http://activemq.apache.org/producer-flow-control.html
        -->
        <systemUsage>
            <systemUsage>
                <memoryUsage>
                    <memoryUsage limit="200 mb"/>
                </memoryUsage>
                <storeUsage>
                    <storeUsage limit="1 gb"/>
                </storeUsage>
                <tempUsage>
                    <tempUsage limit="1 gb"/>
                </tempUsage>
            </systemUsage>
        </systemUsage>

        <% if scope.lookupvar('pe_mcollective::mcollective_enable_stomp_ssl').to_s == 'true' then -%>
        <!-- This defines the keystores to use with activemq here -->
        <sslContext>
          <sslContext
        <% if @osfamily == "Suse" then -%>
            protocol="SSL_TLS"
        <% end %>
            keyStore="file:${activemq.base}/conf/broker.ks" keyStorePassword="puppet"
            trustStore="file:${activemq.base}/conf/broker.ts" trustStorePassword="puppet"
          />
        </sslContext>
        <% end -%>

        <!--
          The transport connectors expose ActiveMQ over a given protocol to
          clients and other brokers. For more information, see:

          http://activemq.apache.org/configuring-transports.html
        -->
        <transportConnectors>
          <!-- openwire is useful for clustering which is why it's enabled by default in PE -->
          <transportConnector name="openwire" uri="<%= scope.lookupvar('pe_mcollective::openwire_activemq_protocol') -%>://0.0.0.0:61616"/>
          <!-- Puppet mcollective_enable_stomp_ssl=<%= scope.lookupvar('pe_mcollective::mcollective_enable_stomp_ssl') %>
               Note, The Java KeyStore and TrustStore are configured in activemq-wrapper.conf -->
          <transportConnector name="<%= scope.lookupvar('pe_mcollective::stomp_activemq_protocol') %>" uri="<%= scope.lookupvar('pe_mcollective::stomp_activemq_protocol') %>://0.0.0.0:<%= scope.lookupvar('pe_mcollective::stomp_port') %>"/>
        </transportConnectors>
    </broker>

    <!--
      Enable web consoles, REST and Ajax APIs and demos
      It also includes Camel (with its web console), see ${ACTIVEMQ_HOME}/conf/camel.xml for more info

      Take a look at ${ACTIVEMQ_HOME}/conf/jetty.xml for more details
    <import resource="jetty.xml"/>
    -->
</beans>
